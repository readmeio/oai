// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defaults parameters should not add a default when one is missing 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfArrayOfPrimitivesWithEmptyDefault": Object {
          "items": Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayOfArrayOfPrimitivesWithNoDefault": Object {
          "items": Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayOfPrimitivesWithEmptyDefault": Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitivesWithNoDefault": Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "objectWithPrimitiveAndNoDefault": Object {
          "properties": Object {
            "param1": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArraysContainingNoAndEmptyDefaults": Object {
          "properties": Object {
            "param1": Object {
              "type": "string",
            },
            "param2": Object {
              "type": "string",
            },
            "param3": Object {
              "items": Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveStringWithEmptyDefault": Object {
          "type": "string",
        },
        "primitiveStringWithNoDefault": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should pass through defaults 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitivesHasDefaults": Object {
          "items": Object {
            "default": "tktktktk",
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitivesHasDefaults": Object {
          "items": Object {
            "items": Object {
              "default": "tktktktk",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays": Object {
          "properties": Object {
            "param1": Object {
              "default": "tktktktk",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "tktktktk",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveQueryhasDefault": Object {
          "default": "tktktktk",
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`parameters type sorting should return with a json schema for each parameter type (body instead of formData) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "path parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "query parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "a": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
  Object {
    "label": "Cookie Params",
    "schema": Object {
      "properties": Object {
        "cookie parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "cookie",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "header parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;

exports[`parameters type sorting should return with a json schema for each parameter type (formData instead of body) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "path parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "query parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
  Object {
    "label": "Cookie Params",
    "schema": Object {
      "properties": Object {
        "cookie parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "cookie",
  },
  Object {
    "label": "Form Data",
    "schema": Object {
      "properties": Object {
        "a": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "formData",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "header parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;
