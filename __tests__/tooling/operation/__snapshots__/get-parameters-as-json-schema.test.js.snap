// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defaults parameters should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:allowEmptyValue[false]default[]": Object {
          "items": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:allowEmptyValue[true]default[]": Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:default[]": Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:allowEmptyValue[false]default[]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:allowEmptyValue[true]default[]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[]": Object {
          "items": Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:allowEmptyValue[false]default[]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:allowEmptyValue[true]default[]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:default[]": Object {
          "properties": Object {
            "param1": Object {
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:allowEmptyValue[false]default[]": Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        "primitiveString:allowEmptyValue[true]default[]": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "primitiveString:default[]": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:allowEmptyValue[false]default[]": Object {
          "items": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:allowEmptyValue[true]default[]": Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:default[]": Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:allowEmptyValue[false]default[]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:allowEmptyValue[true]default[]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[]": Object {
          "items": Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:allowEmptyValue[false]default[]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:allowEmptyValue[true]default[]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:default[]": Object {
          "properties": Object {
            "param1": Object {
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:allowEmptyValue[false]default[]": Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        "primitiveString:allowEmptyValue[true]default[]": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "primitiveString:default[]": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should pass through defaults should pass a default of \`false\` 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[false]": Object {
          "items": Object {
            "default": false,
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[false]": Object {
          "items": Object {
            "items": Object {
              "default": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[false]": Object {
          "properties": Object {
            "param1": Object {
              "default": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[false]": Object {
          "default": false,
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should pass through defaults should use user defined jwtDefaults 1`] = `
Operation {
  "contentType": undefined,
  "jwtDefaults": Object {
    "category": Object {
      "id": 4,
      "name": "Owlbert",
    },
    "id": 5,
  },
  "method": "get",
  "oas": Object {
    "components": Object {
      "requestBodies": Object {
        "Pet": Object {
          "content": Object {
            "application/json": Object {
              "schema": Object {
                "$ref": "#/components/schemas/Pet",
              },
            },
            "application/xml": Object {
              "schema": Object {
                "$ref": "#/components/schemas/Pet",
              },
            },
          },
          "description": "Pet object that needs to be added to the store",
          "required": true,
        },
        "UserArray": Object {
          "content": Object {
            "application/json": Object {
              "schema": Object {
                "items": Object {
                  "$ref": "#/components/schemas/User",
                },
                "type": "array",
              },
            },
          },
          "description": "List of user object",
          "required": true,
        },
      },
      "schemas": Object {
        "ApiResponse": Object {
          "properties": Object {
            "code": Object {
              "format": "int32",
              "type": "integer",
            },
            "message": Object {
              "type": "string",
            },
            "type": Object {
              "type": "string",
            },
          },
          "type": "object",
        },
        "Category": Object {
          "properties": Object {
            "id": Object {
              "format": "int64",
              "type": "integer",
            },
            "name": Object {
              "type": "string",
            },
          },
          "type": "object",
          "xml": Object {
            "name": "Category",
          },
        },
        "Order": Object {
          "properties": Object {
            "complete": Object {
              "default": false,
              "type": "boolean",
            },
            "id": Object {
              "format": "int64",
              "type": "integer",
            },
            "petId": Object {
              "format": "int64",
              "type": "integer",
            },
            "quantity": Object {
              "format": "int32",
              "type": "integer",
            },
            "shipDate": Object {
              "format": "date-time",
              "type": "string",
            },
            "status": Object {
              "description": "Order Status",
              "enum": Array [
                "placed",
                "approved",
                "delivered",
              ],
              "type": "string",
            },
          },
          "type": "object",
          "xml": Object {
            "name": "Order",
          },
        },
        "Pet": Object {
          "properties": Object {
            "category": Object {
              "$ref": "#/components/schemas/Category",
            },
            "id": Object {
              "format": "int64",
              "readOnly": true,
              "type": "integer",
            },
            "name": Object {
              "example": "doggie",
              "type": "string",
            },
            "photoUrls": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
              "xml": Object {
                "name": "photoUrl",
                "wrapped": true,
              },
            },
            "status": Object {
              "description": "pet status in the store",
              "enum": Array [
                "available",
                "pending",
                "sold",
              ],
              "type": "string",
            },
            "tags": Object {
              "items": Object {
                "$ref": "#/components/schemas/Tag",
              },
              "type": "array",
              "xml": Object {
                "name": "tag",
                "wrapped": true,
              },
            },
          },
          "required": Array [
            "name",
            "photoUrls",
          ],
          "type": "object",
          "xml": Object {
            "name": "Pet",
          },
        },
        "Tag": Object {
          "properties": Object {
            "id": Object {
              "format": "int64",
              "type": "integer",
            },
            "name": Object {
              "type": "string",
            },
          },
          "type": "object",
          "xml": Object {
            "name": "Tag",
          },
        },
        "User": Object {
          "properties": Object {
            "email": Object {
              "type": "string",
            },
            "firstName": Object {
              "type": "string",
            },
            "id": Object {
              "format": "int64",
              "type": "integer",
            },
            "lastName": Object {
              "type": "string",
            },
            "password": Object {
              "type": "string",
            },
            "phone": Object {
              "type": "string",
            },
            "userStatus": Object {
              "description": "User Status",
              "format": "int32",
              "type": "integer",
            },
            "username": Object {
              "type": "string",
            },
          },
          "type": "object",
          "xml": Object {
            "name": "User",
          },
        },
      },
      "securitySchemes": Object {
        "api_key": Object {
          "in": "header",
          "name": "api_key",
          "type": "apiKey",
        },
        "petstore_auth": Object {
          "flows": Object {
            "implicit": Object {
              "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
              "scopes": Object {
                "read:pets": "read your pets",
                "write:pets": "modify pets in your account",
              },
            },
          },
          "type": "oauth2",
        },
      },
    },
    "externalDocs": Object {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io",
    },
    "info": Object {
      "contact": Object {
        "email": "apiteam@swagger.io",
      },
      "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key \`special-key\` to test the authorization filters.",
      "license": Object {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
      },
      "termsOfService": "http://swagger.io/terms/",
      "title": "Swagger Petstore",
      "version": "1.0.0",
    },
    "openapi": "3.0.0",
    "paths": Object {
      "/pet": Object {
        "post": Object {
          "description": "",
          "operationId": "addPet",
          "parameters": Array [],
          "requestBody": Object {
            "$ref": "#/components/requestBodies/Pet",
          },
          "responses": Object {
            "405": Object {
              "description": "Invalid input",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Add a new pet to the store",
          "tags": Array [
            "pet",
          ],
        },
        "put": Object {
          "description": "",
          "operationId": "updatePet",
          "parameters": Array [],
          "requestBody": Object {
            "$ref": "#/components/requestBodies/Pet",
          },
          "responses": Object {
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Pet not found",
            },
            "405": Object {
              "description": "Validation exception",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Update an existing pet",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/findByStatus": Object {
        "get": Object {
          "description": "Multiple status values can be provided with comma separated strings",
          "operationId": "findPetsByStatus",
          "parameters": Array [
            Object {
              "description": "Status values that need to be considered for filter",
              "explode": true,
              "in": "query",
              "name": "status",
              "required": true,
              "schema": Object {
                "items": Object {
                  "default": "available",
                  "enum": Array [
                    "available",
                    "pending",
                    "sold",
                  ],
                  "type": "string",
                },
                "type": "array",
              },
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/Pet",
                    },
                    "type": "array",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/Pet",
                    },
                    "type": "array",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid status value",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Finds Pets by status",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/findByTags": Object {
        "get": Object {
          "deprecated": true,
          "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "operationId": "findPetsByTags",
          "parameters": Array [
            Object {
              "description": "Tags to filter by",
              "explode": true,
              "in": "query",
              "name": "tags",
              "required": true,
              "schema": Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/Pet",
                    },
                    "type": "array",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "items": Object {
                      "$ref": "#/components/schemas/Pet",
                    },
                    "type": "array",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid tag value",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Finds Pets by tags",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/{petId}": Object {
        "delete": Object {
          "description": "",
          "operationId": "deletePet",
          "parameters": Array [
            Object {
              "in": "header",
              "name": "api_key",
              "required": false,
              "schema": Object {
                "type": "string",
              },
            },
            Object {
              "description": "Pet id to delete",
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "type": "integer",
              },
            },
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Pet not found",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Deletes a pet",
          "tags": Array [
            "pet",
          ],
        },
        "get": Object {
          "description": "Returns a single pet",
          "operationId": "getPetById",
          "parameters": Array [
            Object {
              "description": "ID of pet to return",
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "type": "integer",
              },
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Pet",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Pet",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Pet not found",
            },
            "default": Object {
              "description": "successful response",
            },
          },
          "security": Array [
            Object {
              "api_key": Array [],
            },
          ],
          "summary": "Find pet by ID",
          "tags": Array [
            "pet",
          ],
        },
        "post": Object {
          "description": "",
          "operationId": "updatePetWithForm",
          "parameters": Array [
            Object {
              "description": "ID of pet that needs to be updated",
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "type": "integer",
              },
            },
          ],
          "requestBody": Object {
            "content": Object {
              "application/x-www-form-urlencoded": Object {
                "schema": Object {
                  "properties": Object {
                    "name": Object {
                      "description": "Updated name of the pet",
                      "type": "string",
                    },
                    "status": Object {
                      "description": "Updated status of the pet",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              },
            },
          },
          "responses": Object {
            "405": Object {
              "description": "Invalid input",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "Updates a pet in the store with form data",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/pet/{petId}/uploadImage": Object {
        "post": Object {
          "description": "",
          "operationId": "uploadFile",
          "parameters": Array [
            Object {
              "description": "ID of pet to update",
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "type": "integer",
              },
            },
          ],
          "requestBody": Object {
            "content": Object {
              "application/octet-stream": Object {
                "schema": Object {
                  "format": "binary",
                  "type": "string",
                },
              },
            },
          },
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/ApiResponse",
                  },
                },
              },
              "description": "successful operation",
            },
          },
          "security": Array [
            Object {
              "petstore_auth": Array [
                "write:pets",
                "read:pets",
              ],
            },
          ],
          "summary": "uploads an image",
          "tags": Array [
            "pet",
          ],
        },
      },
      "/store/inventory": Object {
        "get": Object {
          "description": "Returns a map of status codes to quantities",
          "operationId": "getInventory",
          "parameters": Array [],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "additionalProperties": Object {
                      "format": "int32",
                      "type": "integer",
                    },
                    "type": "object",
                  },
                },
              },
              "description": "successful operation",
            },
          },
          "security": Array [
            Object {
              "api_key": Array [],
            },
          ],
          "summary": "Returns pet inventories by status",
          "tags": Array [
            "store",
          ],
        },
      },
      "/store/order": Object {
        "post": Object {
          "description": "",
          "operationId": "placeOrder",
          "parameters": Array [],
          "requestBody": Object {
            "content": Object {
              "application/json": Object {
                "schema": Object {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "order placed for purchasing the pet",
            "required": true,
          },
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Order",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Order",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid Order",
            },
          },
          "summary": "Place an order for a pet",
          "tags": Array [
            "store",
          ],
        },
      },
      "/store/order/{orderId}": Object {
        "delete": Object {
          "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "operationId": "deleteOrder",
          "parameters": Array [
            Object {
              "description": "ID of the order that needs to be deleted",
              "in": "path",
              "name": "orderId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "minimum": 1,
                "type": "integer",
              },
            },
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Order not found",
            },
          },
          "summary": "Delete purchase order by ID",
          "tags": Array [
            "store",
          ],
        },
        "get": Object {
          "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
          "operationId": "getOrderById",
          "parameters": Array [
            Object {
              "description": "ID of pet that needs to be fetched",
              "in": "path",
              "name": "orderId",
              "required": true,
              "schema": Object {
                "format": "int64",
                "maximum": 10,
                "minimum": 1,
                "type": "integer",
              },
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Order",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/Order",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid ID supplied",
            },
            "404": Object {
              "description": "Order not found",
            },
          },
          "summary": "Find purchase order by ID",
          "tags": Array [
            "store",
          ],
        },
      },
      "/user": Object {
        "post": Object {
          "description": "This can only be done by the logged in user.",
          "operationId": "createUser",
          "parameters": Array [],
          "requestBody": Object {
            "content": Object {
              "application/json": Object {
                "schema": Object {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "Created user object",
            "required": true,
          },
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Create user",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/createWithArray": Object {
        "post": Object {
          "description": "",
          "operationId": "createUsersWithArrayInput",
          "parameters": Array [],
          "requestBody": Object {
            "$ref": "#/components/requestBodies/UserArray",
          },
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Creates list of users with given input array",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/createWithList": Object {
        "post": Object {
          "description": "",
          "operationId": "createUsersWithListInput",
          "parameters": Array [],
          "requestBody": Object {
            "$ref": "#/components/requestBodies/UserArray",
          },
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Creates list of users with given input array",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/login": Object {
        "get": Object {
          "description": "",
          "operationId": "loginUser",
          "parameters": Array [
            Object {
              "description": "The user name for login",
              "in": "query",
              "name": "username",
              "required": true,
              "schema": Object {
                "type": "string",
              },
            },
            Object {
              "description": "The password for login in clear text",
              "in": "query",
              "name": "password",
              "required": true,
              "schema": Object {
                "type": "string",
              },
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "type": "string",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "type": "string",
                  },
                },
              },
              "description": "successful operation",
              "headers": Object {
                "X-Expires-After": Object {
                  "description": "date in UTC when token expires",
                  "schema": Object {
                    "format": "date-time",
                    "type": "string",
                  },
                },
                "X-Rate-Limit": Object {
                  "description": "calls per hour allowed by the user",
                  "schema": Object {
                    "format": "int32",
                    "type": "integer",
                  },
                },
              },
            },
            "400": Object {
              "description": "Invalid username/password supplied",
            },
          },
          "summary": "Logs user into the system",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/logout": Object {
        "get": Object {
          "description": "",
          "operationId": "logoutUser",
          "parameters": Array [],
          "responses": Object {
            "default": Object {
              "description": "successful operation",
            },
          },
          "summary": "Logs out current logged in user session",
          "tags": Array [
            "user",
          ],
        },
      },
      "/user/{username}": Object {
        "delete": Object {
          "description": "This can only be done by the logged in user.",
          "operationId": "deleteUser",
          "parameters": Array [
            Object {
              "description": "The name that needs to be deleted",
              "in": "path",
              "name": "username",
              "required": true,
              "schema": Object {
                "type": "string",
              },
            },
          ],
          "responses": Object {
            "400": Object {
              "description": "Invalid username supplied",
            },
            "404": Object {
              "description": "User not found",
            },
          },
          "summary": "Delete user",
          "tags": Array [
            "user",
          ],
        },
        "get": Object {
          "description": "",
          "operationId": "getUserByName",
          "parameters": Array [
            Object {
              "description": "The name that needs to be fetched. Use user1 for testing. ",
              "in": "path",
              "name": "username",
              "required": true,
              "schema": Object {
                "type": "string",
              },
            },
          ],
          "responses": Object {
            "200": Object {
              "content": Object {
                "application/json": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/User",
                  },
                },
                "application/xml": Object {
                  "schema": Object {
                    "$ref": "#/components/schemas/User",
                  },
                },
              },
              "description": "successful operation",
            },
            "400": Object {
              "description": "Invalid username supplied",
            },
            "404": Object {
              "description": "User not found",
            },
          },
          "summary": "Get user by user name",
          "tags": Array [
            "user",
          ],
        },
        "put": Object {
          "description": "This can only be done by the logged in user.",
          "operationId": "updateUser",
          "parameters": Array [
            Object {
              "description": "name that need to be updated",
              "in": "path",
              "name": "username",
              "required": true,
              "schema": Object {
                "type": "string",
              },
            },
          ],
          "requestBody": Object {
            "content": Object {
              "application/json": Object {
                "schema": Object {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "Updated user object",
            "required": true,
          },
          "responses": Object {
            "400": Object {
              "description": "Invalid user supplied",
            },
            "404": Object {
              "description": "User not found",
            },
          },
          "summary": "Updated user",
          "tags": Array [
            "user",
          ],
        },
      },
    },
    "servers": Array [
      Object {
        "url": "http://petstore.swagger.io/v2",
      },
    ],
    "tags": Array [
      Object {
        "description": "Everything about your Pets",
        "externalDocs": Object {
          "description": "Find out more",
          "url": "http://swagger.io",
        },
        "name": "pet",
      },
      Object {
        "description": "Access to Petstore orders",
        "name": "store",
      },
      Object {
        "description": "Operations about user",
        "externalDocs": Object {
          "description": "Find out more about our store",
          "url": "http://swagger.io",
        },
        "name": "user",
      },
    ],
  },
  "path": "/body",
  "requestBodyExamples": undefined,
  "responseExamples": undefined,
  "schema": Object {
    "requestBody": Object {
      "content": Object {
        "application/json": Object {
          "example": Object {
            "a": "value",
          },
          "schema": Object {
            "properties": Object {
              "a": Object {
                "type": "string",
              },
            },
            "required": Array [
              "a",
            ],
            "type": "object",
          },
        },
        "text/xml": Object {
          "example": Object {
            "a": "value",
          },
          "schema": Object {
            "properties": Object {
              "a": Object {
                "type": "string",
              },
            },
            "required": Array [
              "a",
            ],
            "type": "string",
          },
        },
      },
    },
  },
}
`;

exports[`defaults parameters should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[example default]": Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[example default]": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[example default]": Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[example default]": Object {
          "default": "example default",
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should pass through defaults with simple usages of \`$ref\` 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[example default]": Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[example default]": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[example default]": Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[example default]": Object {
          "default": "example default",
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "allowEmptyValue": true,
        "default": "",
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allowEmptyValue": true,
      "default": "",
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
      "items": Object {
        "allowEmptyValue": true,
        "default": "",
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
      "items": Object {
        "items": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": true,
                    "default": "",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
      "properties": Object {
        "param1": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allowEmptyValue": true,
      "components": Object {
        "schemas": Object {
          "primitiveString": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
        },
      },
      "default": "",
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`allOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`allOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`allOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": true,
                    "default": "",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": true,
                    "default": "",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`allOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
      ],
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "primitiveString-2": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`anyOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`anyOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`anyOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": true,
                    "default": "",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": true,
                    "default": "",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`anyOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
      ],
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "primitiveString-2": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`oneOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
      "oneOf": Array [
        Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`oneOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
      "oneOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`oneOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": true,
                    "default": "",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": true,
                    "default": "",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
      "oneOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`oneOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "primitiveString-2": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
        },
      },
      "oneOf": Array [
        Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "allowEmptyValue": false,
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allowEmptyValue": false,
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with simple usages of \`$ref\` [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
        },
      },
      "items": Object {
        "allowEmptyValue": false,
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with simple usages of \`$ref\` [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
      "items": Object {
        "items": Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with simple usages of \`$ref\` [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": false,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
      "properties": Object {
        "param1": Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with simple usages of \`$ref\` [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allowEmptyValue": false,
      "components": Object {
        "schemas": Object {
          "primitiveString": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
        },
      },
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`allOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "items": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`allOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`allOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": false,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": false,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`allOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        Object {
          "allowEmptyValue": false,
          "type": "string",
        },
      ],
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "primitiveString-2": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`anyOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "items": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`anyOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`anyOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": false,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": false,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`anyOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        Object {
          "allowEmptyValue": false,
          "type": "string",
        },
      ],
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "primitiveString-2": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`oneOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
        },
      },
      "oneOf": Array [
        Object {
          "items": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "type": "array",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`oneOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
      "oneOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`oneOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": false,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "allowEmptyValue": false,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
      "oneOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`oneOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "primitiveString-2": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
        },
      },
      "oneOf": Array [
        Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        Object {
          "allowEmptyValue": false,
          "type": "string",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "default": false,
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "default": false,
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "default": false,
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "default": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "default": false,
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "default": "example default",
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "default": "example default",
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "default": "example default",
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "default": "example default",
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
      "items": Object {
        "default": "example default",
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
      "items": Object {
        "items": Object {
          "default": "example default",
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
      "properties": Object {
        "param1": Object {
          "default": "example default",
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "primitiveString": Object {
            "default": "example default",
            "type": "string",
          },
        },
      },
      "default": "example default",
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`allOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`allOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`allOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`allOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "default": "example default",
          "type": "string",
        },
        Object {
          "default": "example default",
          "type": "string",
        },
      ],
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "default": "example default",
            "type": "string",
          },
          "primitiveString-2": Object {
            "default": "example default",
            "type": "string",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`anyOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`anyOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`anyOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`anyOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "default": "example default",
          "type": "string",
        },
        Object {
          "default": "example default",
          "type": "string",
        },
      ],
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "default": "example default",
            "type": "string",
          },
          "primitiveString-2": Object {
            "default": "example default",
            "type": "string",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`oneOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
        },
      },
      "oneOf": Array [
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`oneOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
      "oneOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`oneOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "default": "example default",
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "default": "example default",
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
      "oneOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`oneOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "default": "example default",
            "type": "string",
          },
          "primitiveString-2": Object {
            "default": "example default",
            "type": "string",
          },
        },
      },
      "oneOf": Array [
        Object {
          "default": "example default",
          "type": "string",
        },
        Object {
          "default": "example default",
          "type": "string",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength parameters should pass maxLength and minLength properties 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:maxLength[20]maxLength[5]": Object {
          "items": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:maxLength[20]maxLength[5]": Object {
          "items": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:maxLength[20]maxLength[5]": Object {
          "properties": Object {
            "param1": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "maxLength": 20,
                  "minLength": 5,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:maxLength[20]maxLength[5]": Object {
          "maxLength": 20,
          "minLength": 5,
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "maxLength": 20,
        "minLength": 5,
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "maxLength": 20,
          "minLength": 5,
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "maxLength": 20,
          "minLength": 5,
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "maxLength": 20,
      "minLength": 5,
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`allOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "items": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`allOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`allOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "maxLength": 20,
                  "minLength": 5,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "maxLength": 20,
                  "minLength": 5,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "maxLength": 20,
                    "minLength": 5,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "maxLength": 20,
                    "minLength": 5,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`allOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allOf": Array [
        Object {
          "maxLength": 20,
          "minLength": 5,
          "type": "string",
        },
        Object {
          "maxLength": 20,
          "minLength": 5,
          "type": "string",
        },
      ],
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
          "primitiveString-2": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`anyOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "items": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`anyOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`anyOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "maxLength": 20,
                  "minLength": 5,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "maxLength": 20,
                  "minLength": 5,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "maxLength": 20,
                    "minLength": 5,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "maxLength": 20,
                    "minLength": 5,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`anyOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "anyOf": Array [
        Object {
          "maxLength": 20,
          "minLength": 5,
          "type": "string",
        },
        Object {
          "maxLength": 20,
          "minLength": 5,
          "type": "string",
        },
      ],
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
          "primitiveString-2": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`oneOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayOfPrimitives-1": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "arrayOfPrimitives-2": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
        },
      },
      "oneOf": Array [
        Object {
          "items": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
          "type": "array",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`oneOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "arrayWithAnArrayOfPrimitives-1": Object {
            "items": Object {
              "items": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
          "arrayWithAnArrayOfPrimitives-2": Object {
            "items": Object {
              "items": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
      },
      "oneOf": Array [
        Object {
          "items": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        Object {
          "items": Object {
            "items": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`oneOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "objectWithPrimitivesAndMixedArrays-1": Object {
            "properties": Object {
              "param1": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "maxLength": 20,
                    "minLength": 5,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          "objectWithPrimitivesAndMixedArrays-2": Object {
            "properties": Object {
              "param1": Object {
                "maxLength": 20,
                "minLength": 5,
                "type": "string",
              },
              "param2": Object {
                "items": Object {
                  "items": Object {
                    "maxLength": 20,
                    "minLength": 5,
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
      "oneOf": Array [
        Object {
          "properties": Object {
            "param1": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "maxLength": 20,
                  "minLength": 5,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "param1": Object {
              "maxLength": 20,
              "minLength": 5,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "maxLength": 20,
                  "minLength": 5,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`minLength / maxLength request bodies should pass maxLength and minLength properties within usages of \`oneOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "primitiveString-1": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
          "primitiveString-2": Object {
            "maxLength": 20,
            "minLength": 5,
            "type": "string",
          },
        },
      },
      "oneOf": Array [
        Object {
          "maxLength": 20,
          "minLength": 5,
          "type": "string",
        },
        Object {
          "maxLength": 20,
          "minLength": 5,
          "type": "string",
        },
      ],
    },
    "type": "body",
  },
]
`;

exports[`request bodies $ref support should ignore, but preserve, circular refs 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "components": Object {
        "schemas": Object {
          "dateTime": Object {
            "format": "date-time",
            "type": "string",
          },
          "offset": Object {
            "properties": Object {
              "id": Object {
                "type": "string",
              },
              "rules": Object {
                "$ref": "#/components/schemas/rules",
              },
            },
            "type": "object",
          },
          "offsetTransition": Object {
            "properties": Object {
              "dateTime": Object {
                "format": "date-time",
                "type": "string",
              },
              "offsetAfter": Object {
                "$ref": "#/components/schemas/offset",
              },
              "offsetBefore": Object {
                "$ref": "#/components/schemas/offset",
              },
            },
            "type": "object",
          },
          "rules": Object {
            "properties": Object {
              "transitions": Object {
                "items": Object {
                  "$ref": "#/components/schemas/offsetTransition",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        },
      },
      "properties": Object {
        "dateTime": Object {
          "format": "date-time",
          "type": "string",
        },
        "dateTimeFromRef": Object {
          "format": "date-time",
          "type": "string",
        },
        "offsetAfter": Object {
          "$ref": "#/components/schemas/offset",
        },
        "offsetBefore": Object {
          "$ref": "#/components/schemas/offset",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`type sorting should return with a json schema for each parameter type (body instead of formData) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "path parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "query parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "a": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
  Object {
    "label": "Cookie Params",
    "schema": Object {
      "properties": Object {
        "cookie parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "cookie",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "header parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;

exports[`type sorting should return with a json schema for each parameter type (formData instead of body) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "path parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "query parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
  Object {
    "label": "Cookie Params",
    "schema": Object {
      "properties": Object {
        "cookie parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "cookie",
  },
  Object {
    "label": "Form Data",
    "schema": Object {
      "properties": Object {
        "a": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "formData",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "header parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;
