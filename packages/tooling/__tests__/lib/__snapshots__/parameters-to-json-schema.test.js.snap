// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defaults parameters should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[]allowEmptyValue[false]": Object {
          "items": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:default[]allowEmptyValue[true]": Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:default[]allowEmptyValue[undefined]": Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[]allowEmptyValue[false]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[]allowEmptyValue[true]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[]allowEmptyValue[undefined]": Object {
          "items": Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[]allowEmptyValue[false]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:default[]allowEmptyValue[true]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:default[]allowEmptyValue[undefined]": Object {
          "properties": Object {
            "param1": Object {
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[]allowEmptyValue[false]": Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        "primitiveString:default[]allowEmptyValue[true]": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "primitiveString:default[]allowEmptyValue[undefined]": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[]allowEmptyValue[false]": Object {
          "items": Object {
            "allowEmptyValue": false,
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:default[]allowEmptyValue[true]": Object {
          "items": Object {
            "allowEmptyValue": true,
            "default": "",
            "type": "string",
          },
          "type": "array",
        },
        "arrayOfPrimitives:default[]allowEmptyValue[undefined]": Object {
          "items": Object {
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[]allowEmptyValue[false]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[]allowEmptyValue[true]": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[]allowEmptyValue[undefined]": Object {
          "items": Object {
            "items": Object {
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[]allowEmptyValue[false]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:default[]allowEmptyValue[true]": Object {
          "properties": Object {
            "param1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "objectWithPrimitivesAndMixedArrays:default[]allowEmptyValue[undefined]": Object {
          "properties": Object {
            "param1": Object {
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[]allowEmptyValue[false]": Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        "primitiveString:default[]allowEmptyValue[true]": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "primitiveString:default[]allowEmptyValue[undefined]": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should pass through defaults should pass a default of \`false\` 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[false]allowEmptyValue[undefined]": Object {
          "items": Object {
            "default": false,
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[false]allowEmptyValue[undefined]": Object {
          "items": Object {
            "items": Object {
              "default": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[false]allowEmptyValue[undefined]": Object {
          "properties": Object {
            "param1": Object {
              "default": false,
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[false]allowEmptyValue[undefined]": Object {
          "default": false,
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[example default]allowEmptyValue[undefined]": Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[example default]allowEmptyValue[undefined]": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[example default]allowEmptyValue[undefined]": Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[example default]allowEmptyValue[undefined]": Object {
          "default": "example default",
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults parameters should pass through defaults with simple usages of \`$ref\` 1`] = `
Array [
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "arrayOfPrimitives:default[example default]allowEmptyValue[undefined]": Object {
          "items": Object {
            "default": "example default",
            "type": "string",
          },
          "type": "array",
        },
        "arrayWithAnArrayOfPrimitives:default[example default]allowEmptyValue[undefined]": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
        "objectWithPrimitivesAndMixedArrays:default[example default]allowEmptyValue[undefined]": Object {
          "properties": Object {
            "param1": Object {
              "default": "example default",
              "type": "string",
            },
            "param2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "primitiveString:default[example default]allowEmptyValue[undefined]": Object {
          "default": "example default",
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "allowEmptyValue": true,
        "default": "",
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "allowEmptyValue": true,
          "default": "",
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allowEmptyValue": true,
      "default": "",
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/arrayOfPrimitives",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": true,
                      "default": "",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with simple usages of \`$ref\` [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/primitiveString",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$allOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives-1": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
            "arrayOfPrimitives-2": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$allOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives-1": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
            "arrayWithAnArrayOfPrimitives-2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$allOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-1",
        },
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays-1": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": true,
                      "default": "",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "objectWithPrimitivesAndMixedArrays-2": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": true,
                      "default": "",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$allOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/primitiveString-1",
        },
        Object {
          "$ref": "#/components/schemas/primitiveString-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString-1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "primitiveString-2": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$anyOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives-1": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
            "arrayOfPrimitives-2": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$anyOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives-1": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
            "arrayWithAnArrayOfPrimitives-2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$anyOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-1",
        },
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays-1": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": true,
                      "default": "",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "objectWithPrimitivesAndMixedArrays-2": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": true,
                      "default": "",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$anyOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/primitiveString-1",
        },
        Object {
          "$ref": "#/components/schemas/primitiveString-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString-1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "primitiveString-2": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$oneOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives-1": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
            "arrayOfPrimitives-2": Object {
              "items": Object {
                "allowEmptyValue": true,
                "default": "",
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$oneOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives-1": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
            "arrayWithAnArrayOfPrimitives-2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$oneOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-1",
        },
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays-1": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": true,
                      "default": "",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "objectWithPrimitivesAndMixedArrays-2": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": true,
                  "default": "",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": true,
                      "default": "",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should comply with the \`allowEmptyValue\` declarative when present with usages of \`$oneOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/primitiveString-1",
        },
        Object {
          "$ref": "#/components/schemas/primitiveString-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString-1": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
            "primitiveString-2": Object {
              "allowEmptyValue": true,
              "default": "",
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "allowEmptyValue": false,
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "allowEmptyValue": false,
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "allowEmptyValue": false,
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with simple usages of \`$ref\` [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/arrayOfPrimitives",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with simple usages of \`$ref\` [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with simple usages of \`$ref\` [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": false,
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with simple usages of \`$ref\` [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/primitiveString",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$allOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives-1": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
            "arrayOfPrimitives-2": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$allOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives-1": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
            "arrayWithAnArrayOfPrimitives-2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$allOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-1",
        },
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays-1": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": false,
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "objectWithPrimitivesAndMixedArrays-2": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": false,
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$allOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/primitiveString-1",
        },
        Object {
          "$ref": "#/components/schemas/primitiveString-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString-1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "primitiveString-2": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$anyOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives-1": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
            "arrayOfPrimitives-2": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$anyOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives-1": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
            "arrayWithAnArrayOfPrimitives-2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$anyOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-1",
        },
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays-1": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": false,
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "objectWithPrimitivesAndMixedArrays-2": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": false,
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$anyOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/primitiveString-1",
        },
        Object {
          "$ref": "#/components/schemas/primitiveString-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString-1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "primitiveString-2": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$oneOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives-1": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
            "arrayOfPrimitives-2": Object {
              "items": Object {
                "allowEmptyValue": false,
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$oneOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives-1": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
            "arrayWithAnArrayOfPrimitives-2": Object {
              "items": Object {
                "items": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$oneOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-1",
        },
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays-1": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": false,
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "objectWithPrimitivesAndMixedArrays-2": Object {
              "properties": Object {
                "param1": Object {
                  "allowEmptyValue": false,
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "allowEmptyValue": false,
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should not add a default when one is missing with usages of \`$oneOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/primitiveString-1",
        },
        Object {
          "$ref": "#/components/schemas/primitiveString-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString-1": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
            "primitiveString-2": Object {
              "allowEmptyValue": false,
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "default": false,
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "default": false,
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "default": false,
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "default": false,
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults should pass a default of \`false\` [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "default": false,
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "default": "example default",
        "type": "string",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "items": Object {
        "items": Object {
          "default": "example default",
          "type": "string",
        },
        "type": "array",
      },
      "type": "array",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "param1": Object {
          "default": "example default",
          "type": "string",
        },
        "param2": Object {
          "items": Object {
            "items": Object {
              "default": "example default",
              "type": "string",
            },
            "type": "array",
          },
          "type": "array",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with normal non-$ref, non-inheritance, non-polymorphism cases [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "default": "example default",
      "type": "string",
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: arrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/arrayOfPrimitives",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: arrayWithAnArrayOfPrimitives] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: objectWithPrimitivesAndMixedArrays] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays": Object {
              "properties": Object {
                "param1": Object {
                  "default": "example default",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "default": "example default",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with simple usages of \`$ref\`\` [scenario: primitiveString] 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$ref": "#/components/schemas/primitiveString",
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString": Object {
              "default": "example default",
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$allOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives-1": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "arrayOfPrimitives-2": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$allOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives-1": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
            "arrayWithAnArrayOfPrimitives-2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$allOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-1",
        },
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays-1": Object {
              "properties": Object {
                "param1": Object {
                  "default": "example default",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "default": "example default",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "objectWithPrimitivesAndMixedArrays-2": Object {
              "properties": Object {
                "param1": Object {
                  "default": "example default",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "default": "example default",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$allOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$allOf": Array [
        Object {
          "$ref": "#/components/schemas/primitiveString-1",
        },
        Object {
          "$ref": "#/components/schemas/primitiveString-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString-1": Object {
              "default": "example default",
              "type": "string",
            },
            "primitiveString-2": Object {
              "default": "example default",
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$anyOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives-1": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "arrayOfPrimitives-2": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$anyOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives-1": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
            "arrayWithAnArrayOfPrimitives-2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$anyOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-1",
        },
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays-1": Object {
              "properties": Object {
                "param1": Object {
                  "default": "example default",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "default": "example default",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "objectWithPrimitivesAndMixedArrays-2": Object {
              "properties": Object {
                "param1": Object {
                  "default": "example default",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "default": "example default",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$anyOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$anyOf": Array [
        Object {
          "$ref": "#/components/schemas/primitiveString-1",
        },
        Object {
          "$ref": "#/components/schemas/primitiveString-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString-1": Object {
              "default": "example default",
              "type": "string",
            },
            "primitiveString-2": Object {
              "default": "example default",
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$oneOf\` scenario: arrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayOfPrimitives-1": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
            "arrayOfPrimitives-2": Object {
              "items": Object {
                "default": "example default",
                "type": "string",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$oneOf\` scenario: arrayWithAnArrayOfPrimitives 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-1",
        },
        Object {
          "$ref": "#/components/schemas/arrayWithAnArrayOfPrimitives-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "arrayWithAnArrayOfPrimitives-1": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
            "arrayWithAnArrayOfPrimitives-2": Object {
              "items": Object {
                "items": Object {
                  "default": "example default",
                  "type": "string",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$oneOf\` scenario: objectWithPrimitivesAndMixedArrays 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-1",
        },
        Object {
          "$ref": "#/components/schemas/objectWithPrimitivesAndMixedArrays-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "objectWithPrimitivesAndMixedArrays-1": Object {
              "properties": Object {
                "param1": Object {
                  "default": "example default",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "default": "example default",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
            "objectWithPrimitivesAndMixedArrays-2": Object {
              "properties": Object {
                "param1": Object {
                  "default": "example default",
                  "type": "string",
                },
                "param2": Object {
                  "items": Object {
                    "items": Object {
                      "default": "example default",
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`defaults request bodies should pass through defaults with usages of \`$oneOf\` scenario: primitiveString 1`] = `
Array [
  Object {
    "label": "Body Params",
    "schema": Object {
      "$oneOf": Array [
        Object {
          "$ref": "#/components/schemas/primitiveString-1",
        },
        Object {
          "$ref": "#/components/schemas/primitiveString-2",
        },
      ],
      "definitions": Object {
        "components": Object {
          "schemas": Object {
            "primitiveString-1": Object {
              "default": "example default",
              "type": "string",
            },
            "primitiveString-2": Object {
              "default": "example default",
              "type": "string",
            },
          },
        },
      },
    },
    "type": "body",
  },
]
`;

exports[`parameters type sorting should return with a json schema for each parameter type (body instead of formData) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "path parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "query parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
  Object {
    "label": "Body Params",
    "schema": Object {
      "properties": Object {
        "a": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "body",
  },
  Object {
    "label": "Cookie Params",
    "schema": Object {
      "properties": Object {
        "cookie parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "cookie",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "header parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;

exports[`parameters type sorting should return with a json schema for each parameter type (formData instead of body) 1`] = `
Array [
  Object {
    "label": "Path Params",
    "schema": Object {
      "properties": Object {
        "path parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "path",
  },
  Object {
    "label": "Query Params",
    "schema": Object {
      "properties": Object {
        "query parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "query",
  },
  Object {
    "label": "Cookie Params",
    "schema": Object {
      "properties": Object {
        "cookie parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "cookie",
  },
  Object {
    "label": "Form Data",
    "schema": Object {
      "properties": Object {
        "a": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
    "type": "formData",
  },
  Object {
    "label": "Headers",
    "schema": Object {
      "properties": Object {
        "header parameter": Object {
          "type": "string",
        },
      },
      "required": Array [],
      "type": "object",
    },
    "type": "header",
  },
]
`;
